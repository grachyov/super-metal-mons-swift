lane :bump do |options|
  current_version = get_version_number(xcodeproj: "super-metal-mons.xcodeproj", target: "mons-ios")
  version_parts = current_version.split(".").map(&:to_i)
  version_parts[-1] += 1
  new_version = options[:version] || version_parts.join(".")
  sh("sed -i '' -e 's/MARKETING_VERSION \\= [^\\;]*\\;/MARKETING_VERSION = #{new_version};/' ../super-metal-mons.xcodeproj/project.pbxproj")
  increment_version_number(version_number: new_version)
  increment_build_number()

  commit_version_bump(
    message: "bump version to #{new_version} (#{get_build_number})",
    xcodeproj: "super-metal-mons.xcodeproj",
    force: true
  )

  push_to_git_remote
end

lane :update_and_login do
  local_fastlane_password = ENV['FASTLANE_PASSWORD']
  ENV['FASTLANE_PASSWORD'] = nil

  require 'spaceship'
  Spaceship::Tunes.login('ivan@ivan.lol')

  update_fastlane
  ENV['FASTLANE_PASSWORD'] = local_fastlane_password
end

lane :clean do
  sh "rm -rf #{File.expand_path('build')}"
end

lane :release do

  update_and_login
  
  platform :ios do
    gym(scheme: "mons-ios", output_directory: "fastlane/build", clean: true)
    deliver(
      metadata_path: "./fastlane/metadata",
      screenshots_path: "./fastlane/screenshots/ios",
      overwrite_screenshots: true,
      platform: "ios",
      run_precheck_before_submit: false,
      force: true,
      submit_for_review: true,
      automatic_release: true,
      submission_information: { add_id_info_uses_idfa: false },
    )
  end

  platform :mac do
    gym(scheme: "mons-catalyst", output_directory: "fastlane/build", clean: true, catalyst_platform: 'macos')
    deliver(
      metadata_path: "./fastlane/metadata",
      screenshots_path: "./fastlane/screenshots/macos",
      overwrite_screenshots: true,
      platform: "osx",
      run_precheck_before_submit: false,
      force: true,
      submit_for_review: true,
      automatic_release: true,
      submission_information: { add_id_info_uses_idfa: false },
    )
  end

  clean
end
